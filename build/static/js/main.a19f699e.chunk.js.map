{"version":3,"sources":["helpers.js","components/WeatherDisplay.js","components/WeatherForm.js","components/ErrorMessage.js","components/App.js","serviceWorker.js","index.js"],"names":["kelvinToFarenheit","temp","kelvinToCelcius","WeatherDisplay","className","this","props","weatherData","name","value","tempMode","onClick","updateTempMode","style","textTransform","weather","description","main","toFixed","temp_min","temp_max","humidity","pressure","src","weatherGif","alt","React","Component","WeatherForm","useState","formValue","setFormValue","type","id","placeholder","onChange","e","target","getCompleteWeather","preventDefault","ErrorMessage","App","getWeather","location","a","fetch","mode","response","console","log","ok","updateWeatherError","updateWeatherData","json","getWeatherGif","weatherGifData","data","images","original","url","updateWeatherGif","error","setState","weatherError","state","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a19f699e.chunk.js","sourcesContent":["function kelvinToFarenheit(temp) {\n  return temp * (9 / 5) - 459.67;\n}\nfunction kelvinToCelcius(temp) {\n  return temp - 273.15;\n}\n\nexport { kelvinToFarenheit, kelvinToCelcius };\n","import React from \"react\";\nimport { kelvinToFarenheit, kelvinToCelcius } from \"../helpers\";\n\nclass WeatherDisplay extends React.Component {\n  render() {\n    return (\n      <div className=\"weatherDisplay\">\n        <div className=\"wDHeader\">\n          <h2>{this.props.weatherData.name} Weather</h2>\n          <div className=\"tempBtnContainer\">\n            <button\n              value=\"C\"\n              className={\n                this.props.tempMode === \"C\"\n                  ? \"tempBtn tempBtnActive\"\n                  : \"tempBtn\"\n              }\n              onClick={() => this.props.updateTempMode(\"C\")}\n            >\n              °C\n            </button>\n            <button\n              value=\"F\"\n              className={\n                this.props.tempMode === \"F\"\n                  ? \"tempBtn tempBtnActive\"\n                  : \"tempBtn\"\n              }\n              onClick={() => this.props.updateTempMode(\"F\")}\n            >\n              °F\n            </button>\n          </div>\n        </div>\n        <h3 style={{ textTransform: \"capitalize\" }}>\n          {this.props.weatherData.weather[0].description}\n        </h3>\n        <h3>\n          Temperature:{\" \"}\n          {this.props.tempMode === \"F\"\n            ? kelvinToFarenheit(this.props.weatherData.main.temp).toFixed(1) +\n              \"°F\"\n            : kelvinToCelcius(this.props.weatherData.main.temp).toFixed(1) +\n              \"°C\"}\n        </h3>\n        <h3>\n          Range:{\" \"}\n          {this.props.tempMode === \"F\"\n            ? kelvinToFarenheit(this.props.weatherData.main.temp_min).toFixed(\n                1\n              ) + \"°F\"\n            : kelvinToCelcius(this.props.weatherData.main.temp_min).toFixed(1) +\n              \"°C\"}{\" \"}\n          -{\" \"}\n          {this.props.tempMode === \"F\"\n            ? kelvinToFarenheit(this.props.weatherData.main.temp_max).toFixed(\n                1\n              ) + \"°F\"\n            : kelvinToCelcius(this.props.weatherData.main.temp_max).toFixed(1) +\n              \"°C\"}\n        </h3>\n\n        <h3>Humidity: {this.props.weatherData.main.humidity}%</h3>\n        <h3>Pressure: {this.props.weatherData.main.pressure}kPa</h3>\n        <img\n          className=\"weatherGIF\"\n          src={this.props.weatherGif}\n          alt=\"GIF of current weather\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default WeatherDisplay;\n","import React, { useState } from \"react\";\n\nfunction WeatherForm(props) {\n  const [formValue, setFormValue] = useState(\"\");\n  const handleSubmit = (e) => {\n    props.getCompleteWeather(formValue);\n    e.preventDefault();\n  };\n  return (\n    <nav className=\"topNav\">\n      <h1>Weather Pro Version 1997 v1.3</h1>\n      <form>\n        <input\n          type=\"text\"\n          name=\"weather\"\n          id=\"weather\"\n          value={formValue}\n          placeholder=\"Please type a city\"\n          onChange={(e) => setFormValue(e.target.value)}\n        />\n        <button type=\"submit\" onClick={handleSubmit}>\n          Get Weather\n        </button>\n      </form>\n    </nav>\n  );\n}\n\nexport default WeatherForm;\n","import React from \"react\";\n\nfunction ErrorMessage(props) {\n  return (\n    <div className=\"errorMessageContainer\">\n      <div>\n        <h2>Error</h2>\n        <button>:(</button>\n      </div>\n      <h3>\n        There was an error fetching that city, please try typing it in correctly\n      </h3>\n      <img\n        src=\"https://media.giphy.com/media/mq5y2jHRCAqMo/giphy.gif\"\n        alt=\"GIF of tiled error messages\"\n      />\n    </div>\n  );\n}\n\nexport default ErrorMessage;\n","import React from \"react\";\nimport WeatherDisplay from \"./WeatherDisplay\";\nimport WeatherForm from \"./WeatherForm\";\nimport ErrorMessage from \"./ErrorMessage\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { tempMode: \"F\" };\n  }\n  componentDidMount() {\n    this.getCompleteWeather(\"lacaster\");\n  }\n  getWeather = async (location) => {\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=a3e0ba4476d1096ca94921c3346150b9`,\n      { mode: \"cors\" }\n    );\n    console.log(response);\n    if (!response.ok) {\n      this.updateWeatherError(true);\n      this.updateWeatherData(null);\n      return \"error\";\n    }\n    this.updateWeatherError(false);\n    const weatherData = await response.json();\n    this.updateWeatherData(weatherData);\n    return weatherData;\n  };\n\n  // code for gathering weather gifs\n  getWeatherGif = async (weather) => {\n    const response = await fetch(\n      `https://api.giphy.com/v1/gifs/translate?api_key=AEepGv1Y4EwvuicBz5PnylRLHRS5Xruc&s=${weather}`,\n      { mode: \"cors\" }\n    );\n\n    const weatherGifData = await response.json();\n    console.log(weatherGifData.data.images.original.url);\n\n    this.updateWeatherGif(weatherGifData.data.images.original.url);\n  };\n\n  getCompleteWeather = async (location) => {\n    const weatherData = await this.getWeather(location);\n    if (weatherData === \"error\") return;\n    this.getWeatherGif(weatherData.weather[0].main);\n  };\n\n  updateWeatherError = (error) => {\n    this.setState({ weatherError: error });\n  };\n  updateWeatherData = (data) => {\n    this.setState({ weatherData: data });\n  };\n  updateWeatherGif = (url) => {\n    this.setState({ weatherGif: url });\n  };\n  updateTempMode = (mode) => {\n    this.setState({ tempMode: mode });\n  };\n  render() {\n    return (\n      <div className=\"app\">\n        <WeatherForm getCompleteWeather={this.getCompleteWeather} />\n        {this.state.weatherError ? <ErrorMessage /> : null}\n\n        {this.state.weatherData ? (\n          <WeatherDisplay\n            weatherData={this.state.weatherData}\n            tempMode={this.state.tempMode}\n            weatherGif={this.state.weatherGif}\n            updateTempMode={this.updateTempMode}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}